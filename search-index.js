var searchIndex = JSON.parse('{\
"diatom":{"doc":"The Diatom Programming Language","t":[3,8,17,11,11,11,11,11,0,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,3,3,4,4,3,3,3,3,4,13,6,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Interpreter","IoWrite","VERSION","borrow","borrow_mut","by_ref","decompile","exec","extension","ffi","flush","from","into","is_write_vectored","load_ext","new","repl","replace_buffer","try_from","try_into","type_id","verify_input_completeness","with_color","with_search_path","write","write_all","write_all_vectored","write_fmt","write_vectored","AHashMap","Extension","ExtensionKind","File","ForeignFunctions","SubExtensions","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","extend","extend","fmt","fmt","from","from","from","from","from","from_iter","get","get_key_value","get_mut","index","insert","into","into","into","into","into_iter","into_iter","into_iter","into_keys","into_values","kind","name","new","remove","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","with_capacity_and_hasher","with_hasher","Bool","Closure","Closure","DiatomList","DiatomListMut","DiatomObject","DiatomObjectMut","DiatomTable","DiatomTableMut","DiatomTuple","DiatomTupleMut","DiatomValue","Float","ForeignFunction","ForeignFunction","ForeignFunction","Int","List","List","Ref","State","Str","Table","Table","Tuple","Tuple","Unit","UserData","UserData","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","collect_garbage","create_str","create_user_data","default","fields","fields","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get_field","get_field","get_obj","get_obj_mut","get_string_by_id","insert","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","len","len","len","len","pause_gc","pop","print","push","ref_id","ref_id","ref_id","ref_id","ref_id","ref_id","remove","resume_gc","reverse","set_idx","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["diatom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","diatom::extension","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","diatom::ffi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The Diatom Interpreter","A trait for objects which are byte-oriented sinks.","The version of this build","","","Creates a “by reference” adapter for this instance of …","Show decompiled byte code for given source code.","Run a piece of diatom source code","Diatom rust extension","Diatom Foreign Function Interface","Flush this output stream, ensuring that all intermediately …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Load an rust extension.","Create a new interpreter instance","Enable or disable REPL mode (print last value to output …","Replace output buffer and get the old one","","","","Check if input is completeness","Enable ansi colored error message","Add module search path","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","A <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …","Diatom rust extension","Kind of extension","Use diatom source code as extension.","A Set of Foreign functions and their names.","Sub extensions.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Examples","This crates a hashmap from the provided iterator using …","Returns a reference to the value corresponding to the key.","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates a consuming iterator visiting all the keys in …","Creates a consuming iterator visiting all the values in …","The kind of this extension","Name of this extension","This crates a hashmap using RandomState::new which obtains …","Removes a key from the map, returning the value at the key …","","","","","","","","","","","This crates a hashmap with the specified capacity using …","","","","Native Diatom Closure (Contains its id)","Native Diatom Closure","Immutable reference to a diatom list","Mutable reference to a diatom table","Immutable reference to a diatom heap allocated object","Mutable reference to a diatom heap allocated object","Immutable reference to a diatom table","Mutable reference to a diatom table","Immutable reference to diatom tuple","Mutable reference to a diatom table","Diatom’s unboxed value type","","Foreign Rust Function/Closure type","Foreign rust closure","Foreign rust closure","","List","List","","State of the virtual machine","","Table","Table","Tuple","Tuple","","UserData","UserData","","","","","","","","","","","","","","","","","","","","","Clear the whole list","","","Immediately collect garbage","Create a new string","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Same as <code>get_obj_mut</code> but this is immutable","Get a mutable reference by reference id","Get string by string id","Insert value at index, return false if idx out of bound or …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Pause garbage collection","","","Return true if value is valid","","","","","","","Remove value at index, return false if idx out of bound or …","Resume garbage collection","","Set value at index, return false if idx out of bound or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,2,2,1,2,2,0,0,1,2,2,1,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,37,37,37,37,10,15,37,10,15,15,15,15,15,15,15,15,15,10,15,37,10,15,15,15,15,15,15,15,15,15,37,10,15,15,15,15,15,15,15,10,10,15,15,15,37,10,15,37,10,15,37,10,15,15,15,15,24,35,36,0,0,0,0,0,0,0,0,0,24,0,35,36,24,35,36,24,0,24,35,36,35,36,24,35,36,29,32,33,35,31,23,34,36,25,24,29,32,33,35,31,23,34,36,25,24,23,24,24,25,25,25,24,29,31,29,32,33,35,31,23,34,36,25,24,32,33,23,34,29,31,25,25,25,23,29,32,33,35,31,23,34,36,25,24,32,33,23,34,32,33,23,34,25,23,25,23,29,32,33,31,23,34,23,25,23,23,24,29,32,33,35,31,23,34,36,25,24,29,32,33,35,31,23,34,36,25,24,29,32,33,35,31,23,34,36,25,24],"f":[0,0,0,[[]],[[]],[[]],[[[2,[1]],[4,[3]],[4,[5]],6],[[8,[7,7]]]],[[[2,[1]],[4,[3]],[4,[5]],6],[[8,[7]]]],0,0,[[],[[8,[9]]]],[[]],[[]],[[],6],[[[2,[1]],[10,[1]]],[[8,[[10,[1]]]]]],[1,[[2,[1]]]],[[[2,[1]],6],[[2,[1]]]],[[[2,[1]],1],1],[[],8],[[],8],[[],11],[[[2,[1]],[4,[3]]],6],[1,[[2,[1]]]],[[[2,[1]],12],[[8,[9]]]],[[],[[8,[13,9]]]],[[],[[8,[9]]]],[[],[[8,[9]]]],[14,[[8,[9]]]],[[],[[8,[13,9]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[[]],[[],[[15,[16]]]],[15],[15],[[15,15],6],[15],[15],[[10,17],[[8,[18]]]],[[15,17],[[8,[18]]]],[[]],[[]],[[[19,[16]]],[[15,[16]]]],[[]],[[],[[15,[16]]]],[[],[[15,[16]]]],[15,20],[15,20],[15,20],[15],[15,20],[[]],[[]],[[]],[[[15,[16]]],[[19,[16]]]],[15],[15],[15],[15,21],[15,22],0,0,[[],[[15,[16]]]],[15,20],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],11],[[],11],[[],11],[13,[[15,[16]]]],[13,15],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23],[24,24],[[]],[25],[[25,7],13],[[25,[28,[26,27]]],13],[[],24],[29,[[30,[3,27]]]],[31,[[30,[3,27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[32,13],[[20,[24]]]],[[33,13],[[20,[24]]]],[[23,13],[[20,[24]]]],[[34,13],[[20,[24]]]],[[29,[4,[3]]],[[20,[24]]]],[[31,[4,[3]]],[[20,[24]]]],[[25,13],[[20,[35]]]],[[25,13],[[20,[36]]]],[[25,13],[[20,[3]]]],[[23,13,24],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,6],[33,6],[23,6],[34,6],[32,13],[33,13],[23,13],[34,13],[25],[23,[[20,[24]]]],[[25,24],7],[[23,24],6],[29,13],[32,13],[33,13],[31,13],[23,13],[34,13],[[23,13],6],[25],[23],[[23,13,24],6],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11]],"p":[[8,"IoWrite"],[3,"Interpreter"],[15,"str"],[8,"AsRef"],[3,"OsStr"],[15,"bool"],[3,"String"],[4,"Result"],[3,"Error"],[3,"Extension"],[3,"TypeId"],[3,"PathBuf"],[15,"usize"],[3,"Arguments"],[3,"AHashMap"],[3,"RandomState"],[3,"Formatter"],[3,"Error"],[3,"HashMap"],[4,"Option"],[3,"IntoKeys"],[3,"IntoValues"],[3,"DiatomListMut"],[4,"DiatomValue"],[3,"State"],[8,"Any"],[3,"Global"],[3,"Box"],[3,"DiatomTable"],[3,"Vec"],[3,"DiatomTableMut"],[3,"DiatomList"],[3,"DiatomTuple"],[3,"DiatomTupleMut"],[4,"DiatomObject"],[4,"DiatomObjectMut"],[4,"ExtensionKind"]]},\
"diatom_cli":{"doc":"","t":[3,3,11,11,11,11,0,12,11,11,11,11,11,11,12,12,11,5,12,11,11,11,11,11,3,11,11,11,0,12,11,11,0,11,11,11,11,0,17,3,3,3,3,17,3,17,3,3,3,3,3,3,3,3,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,12,11,11,11,11,11],"n":["Args","Cli","augment_args","augment_args_for_update","borrow","borrow_mut","cli","color","command","command_for_update","from","from_arg_matches","from_arg_matches_mut","group_id","inspect","interpreter","into","main","path","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","Cli","borrow","borrow_mut","from","highlighter","interpreter","into","new","prompt","run","try_from","try_into","type_id","validator","BUILT_IN_FUNC","COMMENT_STYLE","DEFAULT_STYLE","DiatomHighlighter","FUNC_STYLE","KEYWORDS","KEY_STYLE","KEY_VALUES","KEY_VALUE_STYLE","NUM_STYLE","RE_ANY","RE_COMMENT","RE_ID","RE_NUM","RE_STR","STR_STYLE","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","from","from","from","from","from","from","from","from","from","from","from","from","from","highlight","into","into","into","into","into","into","into","into","into","into","into","into","into","is_func","is_key","is_key_value","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DiatomPrompt","borrow","borrow_mut","default","from","get_indicator_color","get_prompt_color","get_prompt_right_color","into","render_prompt_history_search_indicator","render_prompt_indicator","render_prompt_left","render_prompt_multiline_indicator","render_prompt_right","right_prompt_on_last_line","try_from","try_into","type_id","DiatomValidator","borrow","borrow_mut","from","interpreter","into","try_from","try_into","type_id","validate"],"q":["diatom_cli","","","","","","","","","","","","","","","","","","","","","","","","diatom_cli::cli","","","","","","","","","","","","","","diatom_cli::cli::highlighter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","diatom_cli::cli::prompt","","","","","","","","","","","","","","","","","","diatom_cli::cli::validator","","","","","","","","",""],"d":["","An interactive console for Diatom","","","","","","","","","Returns the argument unchanged.","","","","Show decompiled bytecode instead of execution","","Calls <code>U::from(self)</code>.","","File to be executed, using REPL mode if leaving empty","","","","","","An interactive console for Diatom","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Run this console","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,3,3,3,3,0,3,3,3,3,3,3,3,3,11,3,0,3,3,3,3,3,3,0,11,11,11,0,11,11,11,0,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,17,18,19,20,21,22,24,25,26,27,13,14,16,17,18,19,20,21,22,24,25,26,27,13,14,16,17,18,19,20,21,22,24,25,26,27,13,14,16,17,18,19,20,21,22,24,25,26,27,13,14,16,17,18,19,20,21,22,24,25,26,27,13,13,14,16,17,18,19,20,21,22,24,25,26,27,0,0,0,13,14,16,17,18,19,20,21,22,24,25,26,27,13,14,16,17,18,19,20,21,22,24,25,26,27,13,14,16,17,18,19,20,21,22,24,25,26,27,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,36,36,36,36,36,36,36,36,36],"f":[0,0,[1,1],[1,1],[[]],[[]],0,0,[[],1],[[],1],[[]],[2,[[5,[3,4]]]],[2,[[5,[3,4]]]],[[],[[7,[6]]]],0,0,[[]],[[]],0,[[],5],[[],5],[[],8],[[3,2],[[5,[4]]]],[[3,2],[[5,[4]]]],0,[[]],[[]],[[]],0,0,[[]],[[[10,[9]]],11],0,[[11,12]],[[],5],[[],5],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[14,15],[16,15],[17,15],[18,15],[19,15],[20,15],[21,15],[22,23],[24,23],[25,23],[26,23],[27,23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[13,28,29],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,12],[28,12],[28,12],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,[[]],[[]],[[],31],[[]],[31,32],[31,32],[31,32],[[]],[[31,33],[[34,[28]]]],[[31,35],[[34,[28]]]],[31,[[34,[28]]]],[31,[[34,[28]]]],[31,[[34,[28]]]],[31,12],[[],5],[[],5],[[],8],0,[[]],[[]],[[]],0,[[]],[[],5],[[],5],[[],8],[[36,28],37]],"p":[[3,"Command"],[3,"ArgMatches"],[3,"Args"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[3,"TypeId"],[3,"Stdout"],[3,"Interpreter"],[3,"Cli"],[15,"bool"],[3,"DiatomHighlighter"],[3,"COMMENT_STYLE"],[3,"Style"],[3,"KEY_STYLE"],[3,"KEY_VALUE_STYLE"],[3,"NUM_STYLE"],[3,"STR_STYLE"],[3,"FUNC_STYLE"],[3,"DEFAULT_STYLE"],[3,"RE_NUM"],[3,"Regex"],[3,"RE_STR"],[3,"RE_ID"],[3,"RE_COMMENT"],[3,"RE_ANY"],[15,"str"],[15,"usize"],[3,"StyledText"],[3,"DiatomPrompt"],[4,"Color"],[3,"PromptHistorySearch"],[4,"Cow"],[4,"PromptEditMode"],[3,"DiatomValidator"],[4,"ValidationResult"]]},\
"diatom_core":{"doc":"Diatom Interpreter Core","t":[3,8,8,11,11,11,11,11,0,0,10,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,3,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,3,3,4,4,3,3,3,3,4,13,6,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Interpreter","IoWrite","StdCore","borrow","borrow_mut","by_ref","decompile","exec","extension","ffi","flush","from","impl_extern_function","into","is_write_vectored","load_ext","new","prelude_extension","prelude_files","prelude_names","repl","replace_buffer","try_from","try_into","type_id","verify_input_completeness","with_color","with_search_path","write","write_all","write_all_vectored","write_fmt","write_vectored","AHashMap","Extension","ExtensionKind","File","ForeignFunctions","SubExtensions","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref_mut","eq","extend","extend","fmt","fmt","from","from","from","from","from","from_iter","get","get_key_value","get_mut","index","insert","into","into","into","into","into_iter","into_iter","into_iter","into_keys","into_values","kind","name","new","remove","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","with_capacity_and_hasher","with_hasher","Bool","Closure","Closure","DiatomList","DiatomListMut","DiatomObject","DiatomObjectMut","DiatomTable","DiatomTableMut","DiatomTuple","DiatomTupleMut","DiatomValue","Float","ForeignFunction","ForeignFunction","ForeignFunction","Int","List","List","Ref","State","Str","Table","Table","Tuple","Tuple","Unit","UserData","UserData","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","collect_garbage","create_str","create_user_data","default","fields","fields","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get_field","get_field","get_obj","get_obj_mut","get_string_by_id","insert","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","len","len","len","len","pause_gc","pop","print","push","ref_id","ref_id","ref_id","ref_id","ref_id","ref_id","remove","resume_gc","reverse","set_idx","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["diatom_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","diatom_core::extension","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","diatom_core::ffi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A trait for objects which are byte-oriented sinks.","Interface with standard library core","","","Creates a “by reference” adapter for this instance of …","Show decompiled byte code for given source code.","Run a piece of diatom source code","Diatom rust extension","Diatom Foreign Function Interface","Flush this output stream, ensuring that all intermediately …","Returns the argument unchanged.","Directly declare external function as variable","Calls <code>U::from(self)</code>.","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","Create a new interpreter instance","Prelude modules","Prelude files to execute right after interpreter …","Names should be defined in prelude","Enable or disable REPL mode (print last value to output …","Replace output buffer and get the old one","","","","Check if input is completeness","Enable ansi colored error message","Add module search path","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","A <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …","Diatom rust extension","Kind of extension","Use diatom source code as extension.","A Set of Foreign functions and their names.","Sub extensions.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Examples","","Returns the argument unchanged.","This crates a hashmap from the provided iterator using …","Returns a reference to the value corresponding to the key.","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","","Creates a consuming iterator visiting all the keys in …","Creates a consuming iterator visiting all the values in …","The kind of this extension","Name of this extension","This crates a hashmap using RandomState::new which obtains …","Removes a key from the map, returning the value at the key …","","","","","","","","","","","This crates a hashmap with the specified capacity using …","","","","Native Diatom Closure (Contains its id)","Native Diatom Closure","Immutable reference to a diatom list","Mutable reference to a diatom table","Immutable reference to a diatom heap allocated object","Mutable reference to a diatom heap allocated object","Immutable reference to a diatom table","Mutable reference to a diatom table","Immutable reference to diatom tuple","Mutable reference to a diatom table","Unboxed Primitive Types Diatom’s unboxed value type","","Foreign Rust Function/Closure type","Foreign rust closure","Foreign rust closure","","List","List","","State of the virtual machine","","Table","Table","Tuple","Tuple","","UserData","UserData","","","","","","","","","","","","","","","","","","","","","Clear the whole list","","","Immediately collect garbage","Create a new string","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Same as <code>get_obj_mut</code> but this is immutable","Get a mutable reference by reference id","Get string by string id","Insert value at index, return false if idx out of bound or …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Pause garbage collection","","","Return true if value is valid","","","","","","","Remove value at index, return false if idx out of bound or …","Resume garbage collection","","Set value at index, return false if idx out of bound or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,3,3,1,3,3,0,0,1,3,3,3,1,3,3,2,2,2,3,3,3,3,3,3,3,3,1,1,1,1,1,0,0,0,39,39,39,39,12,17,39,12,17,17,17,17,17,17,17,17,17,12,17,39,12,17,17,17,17,17,17,17,17,17,39,12,17,17,17,17,17,17,17,12,12,17,17,17,39,12,17,39,12,17,39,12,17,17,17,17,27,37,38,0,0,0,0,0,0,0,0,0,27,0,37,38,27,37,38,27,0,27,37,38,37,38,27,37,38,31,34,35,37,33,26,36,38,28,27,31,34,35,37,33,26,36,38,28,27,26,27,27,28,28,28,27,31,33,31,34,35,37,33,26,36,38,28,27,34,35,26,36,31,33,28,28,28,26,31,34,35,37,33,26,36,38,28,27,34,35,26,36,34,35,26,36,28,26,28,26,31,34,35,33,26,36,26,28,26,26,27,31,34,35,37,33,26,36,38,28,27,31,34,35,37,33,26,36,38,28,27,31,34,35,37,33,26,36,38,28,27],"f":[0,0,0,[[]],[[]],[[]],[[[3,[1,2]],[5,[4]],[5,[6]],7],[[9,[8,8]]]],[[[3,[1,2]],[5,[4]],[5,[6]],7],[[9,[8]]]],0,0,[[],[[9,[10]]]],[[]],[[[3,[1,2]],[11,[8]]]],[[]],[[],7],[[[3,[1,2]],[12,[1]]],[[9,[[12,[1]]]]]],[1,[[3,[1,2]]]],[[],[[12,[1]]]],[[]],[[]],[[[3,[1,2]],7],[[3,[1,2]]]],[[[3,[1,2]],1],1],[[],9],[[],9],[[],13],[[[3,[1,2]],[5,[4]]],7],[1,[[3,[1,2]]]],[[[3,[1,2]],14],[[9,[10]]]],[[],[[9,[15,10]]]],[[],[[9,[10]]]],[[],[[9,[10]]]],[16,[[9,[10]]]],[[],[[9,[15,10]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[[]],[[],[[17,[18]]]],[17],[17],[[17,17],7],[17],[17],[[[12,[1]],19],20],[[17,19],[[9,[21]]]],[[]],[[]],[[],[[17,[18]]]],[[[22,[18]]],[[17,[18]]]],[[]],[[],[[17,[18]]]],[17,23],[17,23],[17,23],[17],[17,23],[[]],[[]],[[[17,[18]]],[[22,[18]]]],[[]],[17],[17],[17],[17,24],[17,25],0,0,[[],[[17,[18]]]],[17,23],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],13],[[],13],[[],13],[15,[[17,[18]]]],[15,17],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[1]]]],[27,27],[[]],[[[28,[1]]]],[[[28,[1]],8],15],[[[28,[1]],[30,[29]]],15],[[],27],[[[31,[1]]],[[32,[4]]]],[[[33,[1]]],[[32,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[34,15],[[23,[27]]]],[[35,15],[[23,[27]]]],[[[26,[1]],15],[[23,[27]]]],[[[36,[1]],15],[[23,[27]]]],[[[31,[1]],[5,[4]]],[[23,[27]]]],[[[33,[1]],[5,[4]]],[[23,[27]]]],[[[28,[1]],15],[[23,[[37,[1]]]]]],[[[28,[1]],15],[[23,[[38,[1]]]]]],[[[28,[1]],15],[[23,[4]]]],[[[26,[1]],15,27],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,7],[35,7],[[[26,[1]]],7],[[[36,[1]]],7],[34,15],[35,15],[[[26,[1]]],15],[[[36,[1]]],15],[[[28,[1]]]],[[[26,[1]]],[[23,[27]]]],[[[28,[1]],27],8],[[[26,[1]],27],7],[[[31,[1]]],15],[34,15],[35,15],[[[33,[1]]],15],[[[26,[1]]],15],[[[36,[1]]],15],[[[26,[1]],15],7],[[[28,[1]]]],[[[26,[1]]]],[[[26,[1]],15,27],7],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13]],"p":[[8,"IoWrite"],[8,"StdCore"],[3,"Interpreter"],[15,"str"],[8,"AsRef"],[3,"OsStr"],[15,"bool"],[3,"String"],[4,"Result"],[3,"Error"],[8,"Into"],[3,"Extension"],[3,"TypeId"],[3,"PathBuf"],[15,"usize"],[3,"Arguments"],[3,"AHashMap"],[3,"RandomState"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"HashMap"],[4,"Option"],[3,"IntoKeys"],[3,"IntoValues"],[3,"DiatomListMut"],[4,"DiatomValue"],[3,"State"],[8,"Any"],[3,"Box"],[3,"DiatomTable"],[3,"Vec"],[3,"DiatomTableMut"],[3,"DiatomList"],[3,"DiatomTuple"],[3,"DiatomTupleMut"],[4,"DiatomObject"],[4,"DiatomObjectMut"],[4,"ExtensionKind"]]},\
"diatom_std_core":{"doc":"","t":[3,11,11,11,11,11,11,11,5,11,11,11],"n":["StdLibCore","borrow","borrow_mut","from","into","prelude_extension","prelude_files","prelude_names","std_lib","try_from","try_into","type_id"],"q":["diatom_std_core","","","","","","","","","","",""],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,6,6,6,6,6,6,6,0,6,6,6],"f":[0,[[]],[[]],[[]],[[]],[[],[[2,[1]]]],[[]],[[]],[[],[[3,[[2,[1]]]]]],[[],4],[[],4],[[],5]],"p":[[8,"Write"],[3,"Extension"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"StdLibCore"]]},\
"diatom_std_os":{"doc":"","t":[5],"n":["os_extension"],"q":["diatom_std_os"],"d":[""],"i":[0],"f":[[[],[[2,[1]]]]],"p":[[8,"Write"],[3,"Extension"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
